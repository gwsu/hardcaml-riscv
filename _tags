# OASIS_START
# DO NOT EDIT (digest: 810cfaf310b9c0d59a7f031907ce9436)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library HardCamlRiscV
"src/HardCamlRiscV.cmxs": use_HardCamlRiscV
"src/utils.cmx": for-pack(HardCamlRiscV)
"src/config.cmx": for-pack(HardCamlRiscV)
"src/interface_ex.cmx": for-pack(HardCamlRiscV)
"src/interfaces.cmx": for-pack(HardCamlRiscV)
"src/cache.cmx": for-pack(HardCamlRiscV)
"src/scache.cmx": for-pack(HardCamlRiscV)
"src/csr.cmx": for-pack(HardCamlRiscV)
"src/rf.cmx": for-pack(HardCamlRiscV)
"src/fetch.cmx": for-pack(HardCamlRiscV)
"src/decoder.cmx": for-pack(HardCamlRiscV)
"src/alu.cmx": for-pack(HardCamlRiscV)
"src/mem.cmx": for-pack(HardCamlRiscV)
"src/commit.cmx": for-pack(HardCamlRiscV)
"src/pipe.cmx": for-pack(HardCamlRiscV)
"src/picorv32.cmx": for-pack(HardCamlRiscV)
<src/*.ml{,i,y}>: pkg_deriving
<src/*.ml{,i,y}>: pkg_hardcaml
<src/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<src/*.ml{,i,y}>: pkg_hardcaml.syntax
<src/*.ml{,i,y}>: pkg_riscv
# Library HardCamlAltera
"altera/src/HardCamlAltera.cmxs": use_HardCamlAltera
"altera/src/util.cmx": for-pack(HardCamlAltera)
"altera/src/avalon.cmx": for-pack(HardCamlAltera)
"altera/src/pll.cmx": for-pack(HardCamlAltera)
"altera/src/vjtag_mm.cmx": for-pack(HardCamlAltera)
"altera/src/sdram.cmx": for-pack(HardCamlAltera)
"altera/src/de0_nano.cmx": for-pack(HardCamlAltera)
<altera/src/*.ml{,i,y}>: pkg_hardcaml
<altera/src/*.ml{,i,y}>: pkg_hardcaml.syntax
# Executable rv32p5
<simulators/rv32p5.{native,byte}>: pkg_deriving
<simulators/rv32p5.{native,byte}>: pkg_hardcaml
<simulators/rv32p5.{native,byte}>: pkg_hardcaml-llvmsim
<simulators/rv32p5.{native,byte}>: pkg_hardcaml-waveterm.lterm
<simulators/rv32p5.{native,byte}>: pkg_hardcaml.syntax
<simulators/rv32p5.{native,byte}>: pkg_lwt.syntax
<simulators/rv32p5.{native,byte}>: pkg_riscv
<simulators/rv32p5.{native,byte}>: use_HardCamlRiscV
<simulators/rv32p5.{native,byte}>: custom
# Executable rv32p1
<simulators/rv32p1.{native,byte}>: pkg_deriving
<simulators/rv32p1.{native,byte}>: pkg_hardcaml
<simulators/rv32p1.{native,byte}>: pkg_hardcaml-llvmsim
<simulators/rv32p1.{native,byte}>: pkg_hardcaml-waveterm.lterm
<simulators/rv32p1.{native,byte}>: pkg_hardcaml.syntax
<simulators/rv32p1.{native,byte}>: pkg_lwt.syntax
<simulators/rv32p1.{native,byte}>: pkg_riscv
<simulators/rv32p1.{native,byte}>: use_HardCamlRiscV
<simulators/*.ml{,i,y}>: pkg_deriving
<simulators/*.ml{,i,y}>: pkg_hardcaml
<simulators/*.ml{,i,y}>: pkg_hardcaml-llvmsim
<simulators/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<simulators/*.ml{,i,y}>: pkg_hardcaml.syntax
<simulators/*.ml{,i,y}>: pkg_lwt.syntax
<simulators/*.ml{,i,y}>: pkg_riscv
<simulators/*.ml{,i,y}>: use_HardCamlRiscV
<simulators/rv32p1.{native,byte}>: custom
# Executable instr_trap_sat
<test/sat/instr_trap_sat.{native,byte}>: pkg_deriving
<test/sat/instr_trap_sat.{native,byte}>: pkg_hardcaml
<test/sat/instr_trap_sat.{native,byte}>: pkg_hardcaml-bloop
<test/sat/instr_trap_sat.{native,byte}>: pkg_hardcaml-waveterm.lterm
<test/sat/instr_trap_sat.{native,byte}>: pkg_hardcaml.syntax
<test/sat/instr_trap_sat.{native,byte}>: pkg_riscv
<test/sat/instr_trap_sat.{native,byte}>: use_HardCamlRiscV
<test/sat/instr_trap_sat.{native,byte}>: custom
# Executable instr_impl_sat
<test/sat/instr_impl_sat.{native,byte}>: pkg_deriving
<test/sat/instr_impl_sat.{native,byte}>: pkg_hardcaml
<test/sat/instr_impl_sat.{native,byte}>: pkg_hardcaml-bloop
<test/sat/instr_impl_sat.{native,byte}>: pkg_hardcaml-waveterm.lterm
<test/sat/instr_impl_sat.{native,byte}>: pkg_hardcaml.syntax
<test/sat/instr_impl_sat.{native,byte}>: pkg_riscv
<test/sat/instr_impl_sat.{native,byte}>: use_HardCamlRiscV
<test/sat/*.ml{,i,y}>: pkg_deriving
<test/sat/*.ml{,i,y}>: pkg_hardcaml
<test/sat/*.ml{,i,y}>: pkg_hardcaml-bloop
<test/sat/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<test/sat/*.ml{,i,y}>: pkg_hardcaml.syntax
<test/sat/*.ml{,i,y}>: pkg_riscv
<test/sat/*.ml{,i,y}>: use_HardCamlRiscV
<test/sat/instr_impl_sat.{native,byte}>: custom
# OASIS_STOP
true: debug
<firmware>: -traverse

